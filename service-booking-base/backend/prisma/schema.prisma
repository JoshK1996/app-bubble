// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  PROVIDER
  ADMIN
}

enum BookingStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  COMPLETED
  IN_PROGRESS
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  password       String
  firstName      String
  lastName       String
  role           Role      @default(CUSTOMER)
  profileImage   String?
  phoneNumber    String?
  bio            String?   @db.Text
  address        String?
  city           String?
  state          String?
  postalCode     String?
  country        String?
  isVerified     Boolean   @default(false)
  averageRating  Float?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  providedServices Service[]        @relation("ServiceProvider")
  bookingsAsCustomer Booking[]      @relation("BookingCustomer")
  bookingsAsProvider Booking[]      @relation("BookingProvider")
  reviewsGiven       Review[]       @relation("ReviewAuthor")
  reviewsReceived    Review[]       @relation("ReviewSubject")

  @@map("users")
}

model Service {
  id          String    @id @default(uuid())
  title       String
  description String    @db.Text
  price       Float
  duration    Int       // Service duration in minutes
  category    String
  location    String?
  imageUrl    String?
  isActive    Boolean   @default(true)
  providerId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  provider    User      @relation("ServiceProvider", fields: [providerId], references: [id], onDelete: Cascade)
  bookings    Booking[]

  @@index([providerId])
  @@index([category])
  @@map("services")
}

model Booking {
  id              String        @id @default(uuid())
  customerId      String
  providerId      String
  serviceId       String
  status          BookingStatus @default(PENDING)
  scheduledDate   DateTime
  scheduledTime   String
  notes           String?       @db.Text
  totalPrice      Float
  paymentStatus   String?       // For future payment integration
  cancellationReason String?    
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  customer        User          @relation("BookingCustomer", fields: [customerId], references: [id], onDelete: Cascade)
  provider        User          @relation("BookingProvider", fields: [providerId], references: [id], onDelete: Cascade)
  service         Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  review          Review?

  @@index([customerId])
  @@index([providerId])
  @@index([serviceId])
  @@index([status])
  @@map("bookings")
}

model Review {
  id          String    @id @default(uuid())
  bookingId   String    @unique
  authorId    String    // Customer who wrote the review
  subjectId   String    // Provider being reviewed
  rating      Int       // 1-5 rating
  comment     String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  booking     Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  author      User      @relation("ReviewAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  subject     User      @relation("ReviewSubject", fields: [subjectId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([subjectId])
  @@map("reviews")
} 