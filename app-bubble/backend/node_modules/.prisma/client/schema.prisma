// This is the Prisma schema file for the Task Management / Productivity Bubble
// It defines the data model for SQLite database using Prisma ORM

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model for authentication and user information
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("user") // Using string instead of enum for SQLite compatibility
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  refreshTokens RefreshToken[]

  // Task Management relations
  createdBoards Board[] @relation("BoardCreator") // Boards created by this user
  ownedBoards   Board[] @relation("BoardOwner") // Boards owned by this user
  createdTasks  Task[]  @relation("TaskCreator")
  assignedTasks Task[]  @relation("TaskAssignee")

  // Chat relations
  messages     Message[]
  participants Participant[]

  // Blog relations
  posts Post[]

  @@map("users")
}

// Board model - represents a project or collection of tasks
model Board {
  id          String   @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  createdBy   User   @relation("BoardCreator", fields: [createdById], references: [id]) // Updated relation name
  createdById String @map("created_by_id")

  owner   User   @relation("BoardOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String @map("owner_id")

  columns Column[]

  @@map("boards")
}

// Column model - represents a status column within a board (e.g., "To Do", "In Progress", "Done")
model Column {
  id        String   @id @default(uuid())
  title     String
  order     Int // Position of the column in the board
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId String @map("board_id")

  tasks Task[]

  @@map("columns")
}

// Task model - represents a task or item within a column
model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  order       Int // Position of the task in the column
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deadline    DateTime? // Optional deadline for the task

  // Relations
  column   Column @relation(fields: [columnId], references: [id], onDelete: Cascade)
  columnId String @map("column_id")

  assignee   User?   @relation("TaskAssignee", fields: [assigneeId], references: [id])
  assigneeId String? @map("assignee_id")

  createdBy   User   @relation("TaskCreator", fields: [createdById], references: [id])
  createdById String

  @@map("tasks")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

// Chat models for the chat functionality
model ChatRoom {
  id        String   @id @default(uuid())
  name      String? // Optional for group chats
  type      String   @default("direct") // "direct" or "group"
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  messages     Message[]
  participants Participant[]

  @@map("chat_rooms")
}

model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId String   @map("chat_room_id")

  sender   User   @relation(fields: [senderId], references: [id])
  senderId String @map("sender_id")

  @@map("messages")
}

model Participant {
  id       String    @id @default(uuid())
  joinedAt DateTime  @default(now()) @map("joined_at")
  lastRead DateTime? @map("last_read") // Last time user read messages in this room

  // Relations
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId String   @map("chat_room_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@unique([chatRoomId, userId]) // User can only be in a chat room once
  @@map("participants")
}

// Blog models for content delivery functionality
model Post {
  id          String    @id @default(uuid())
  title       String
  slug        String    @unique
  content     String
  excerpt     String?
  status      String    @default("DRAFT") // "DRAFT" or "PUBLISHED"
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  publishedAt DateTime? @map("published_at")

  // Relations
  author   User   @relation(fields: [authorId], references: [id])
  authorId String @map("author_id")

  categories CategoryOnPost[]
  tags       TagOnPost[]

  @@map("posts")
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  posts CategoryOnPost[]

  @@map("categories")
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  posts TagOnPost[]

  @@map("tags")
}

// Many-to-many relation between Post and Category
model CategoryOnPost {
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String   @map("post_id")
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String   @map("category_id")
  assignedAt DateTime @default(now()) @map("assigned_at")

  @@id([postId, categoryId])
  @@map("category_on_post")
}

// Many-to-many relation between Post and Tag
model TagOnPost {
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String   @map("post_id")
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId      String   @map("tag_id")
  assignedAt DateTime @default(now()) @map("assigned_at")

  @@id([postId, tagId])
  @@map("tag_on_post")
}
