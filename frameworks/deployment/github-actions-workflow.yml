name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        framework: [react-app, vue-app, nextjs-app]
        node-version: [18.x]

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frameworks/frontend/${{ matrix.framework }}/package-lock.json
    - name: Install dependencies
      working-directory: frameworks/frontend/${{ matrix.framework }}
      run: npm ci
    - name: Run tests
      working-directory: frameworks/frontend/${{ matrix.framework }}
      run: npm test -- --passWithNoTests

  test-backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        framework: [express, fastapi, flask]
        include:
          - framework: express
            language: node
            version: 18.x
          - framework: fastapi
            language: python
            version: 3.10
          - framework: flask
            language: python
            version: 3.10

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      if: matrix.language == 'node'
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.version }}
        cache: 'npm'
        cache-dependency-path: frameworks/backend/${{ matrix.framework }}/package-lock.json
    
    - name: Set up Python
      if: matrix.language == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.version }}
    
    - name: Install Node.js dependencies
      if: matrix.language == 'node'
      working-directory: frameworks/backend/${{ matrix.framework }}
      run: npm ci
    
    - name: Install Python dependencies
      if: matrix.language == 'python'
      working-directory: frameworks/backend/${{ matrix.framework }}
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest
    
    - name: Run Node.js tests
      if: matrix.language == 'node'
      working-directory: frameworks/backend/${{ matrix.framework }}
      run: npm test -- --passWithNoTests
    
    - name: Run Python tests
      if: matrix.language == 'python'
      working-directory: frameworks/backend/${{ matrix.framework }}
      run: |
        if [ -d tests ]; then pytest; else echo "No tests found"; fi

  build-and-deploy:
    needs: [test-frontend, test-backend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Docker images
      run: |
        docker-compose build
        docker-compose push
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add deployment commands here (e.g., kubectl apply, AWS ECS update, etc.)
